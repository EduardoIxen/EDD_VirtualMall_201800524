package main

import (
	"ProyectoEDD/Datos"
	"ProyectoEDD/Estructura"
	"encoding/json"
	"fmt"
	"github.com/gorilla/mux"
	"io/ioutil"
	"log"
	"net/http"
)

type Calificacion struct {
	regular []*Estructura.ListaDoble
	buena []*Estructura.ListaDoble
	muyBuena []*Estructura.ListaDoble
	excelente []*Estructura.ListaDoble
	magnifica []*Estructura.ListaDoble
}
type allData []*Datos.AutoGenerated
var listaDatos = allData{}

type allDep []string
var lsDep = allDep{}

type allIndex []string
var lsIndex = allIndex{}

func cargartienda(w http.ResponseWriter, r *http.Request)  {
	var nuevaEntrada *Datos.AutoGenerated
	reqBody, err := ioutil.ReadAll(r.Body)

	if err != nil{
		fmt.Fprintf(w, "----Error al cargar la entrada----")
	}
	json.Unmarshal(reqBody, &nuevaEntrada)
	listaDatos = append(listaDatos, nuevaEntrada)

	indices := 0
	departamentos := 0

	for _, dat := range listaDatos{
		for _, indx := range dat.Datos{
			indices += 1
			lsIndex = append(lsIndex, indx.Indice)
		}
	}
	fmt.Printf("Indices %v \n", indices)
	for _, ind := range lsIndex{
		fmt.Println(ind)
	}
	for _, dat := range listaDatos{
		for _, indice := range dat.Datos{
			for _, depa := range indice.Departamentos {
				departamentos += 1
				lsDep = append(lsDep, depa.Nombre)
			}
			break
		}
	}
	fmt.Println(departamentos)
	for _, dep := range lsDep{
		fmt.Println(dep)
	}

	/*for _, dat := range listaDatos{
		for _, contenido := range dat.Datos {
			fmt.Println(contenido.Indice) //indice
			indices += 1
			fmt.Fprintln(w, contenido.Indice)
			for _, depa := range contenido.Departamentos {
				fmt.Println(depa.Nombre) //nombre departamento
				departamentos += 1
				fmt.Fprintln(w, depa.Nombre)
				fmt.Printf("Numero de depa %v \n", departamentos)
				for _, tien := range depa.Tiendas{
					fmt.Println(tien.Nombre)
					fmt.Println(tien.Descripcion)
					fmt.Println(tien.Contacto)
					fmt.Println(tien.Calificacion)
					fmt.Fprintln(w, tien.Nombre)
					fmt.Fprintln(w, tien.Descripcion)
					fmt.Fprintln(w, tien.Contacto)
					fmt.Fprintln(w, tien.Calificacion)
				}
			}
			fmt.Println("///////////////////////////////////")
		}

	}*/
	tamanio := len(listaDatos[0].Datos[0].Indice)
	fmt.Fprintf(w, string(tamanio))
	fmt.Println(tamanio)
	//w.Header().Set("Content-Type", "application/json")
	//w.WriteHeader(http.StatusCreated)
	//json.NewEncoder(w).Encode(nuevaEntrada)
}

func main() {
	router := mux.NewRouter().StrictSlash(true)
	router.HandleFunc("/", indexRoute)
	router.HandleFunc("/cargartienda", cargartienda).Methods("POST")
	var t1 *Datos.Tienda =Datos.NewTienda("Tienda3", "Es la tienda 1", "12312321", 3)
	var t2 *Datos.Tienda =Datos.NewTienda("Tienda2", "Es la tienda 2", "12312321", 2)
	//var t0 *Datos.Tienda =Datos.NewTienda("Tienda0", "Es la tienda 2", "12312321", 2)
	var t3 *Datos.Tienda =Datos.NewTienda("Tienda1", "Es la tienda 3", "12312321", 1)
	var t5 *Datos.Tienda =Datos.NewTienda("Tienda5", "Es la tienda 3", "12312321", 1)
	var t6 *Datos.Tienda =Datos.NewTienda("Tienda", "Es la tienda 3", "12312321", 1)
	var t7 *Datos.Tienda =Datos.NewTienda("Tienda4", "Es la tienda 3", "12312321", 1)
	var t8 *Datos.Tienda =Datos.NewTienda("Tienda00", "Es la tienda 3", "12312321", 1)
	var listaDoble *Estructura.ListaDoble =Estructura.NewListaDoble()
	Estructura.Insertar(t1, listaDoble)
	Estructura.Insertar(t2, listaDoble)
	//Estructura.Insertar(t0, listaDoble)
	Estructura.Insertar(t3, listaDoble)
	Estructura.Insertar(t5, listaDoble)
	Estructura.Insertar(t6, listaDoble)
	Estructura.Insertar(t7, listaDoble)
	Estructura.Insertar(t8, listaDoble)
	Estructura.Imprimir(listaDoble)
	log.Fatal(http.ListenAndServe(":3000", router))

}

func indexRoute(w http.ResponseWriter, r *http.Request)  {
	fmt.Fprintf(w, "Welcome to my apisss22")
}
